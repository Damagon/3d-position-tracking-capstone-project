
SPI-example-Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000016c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080010c  0080010c  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034d  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fc  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000267  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000230  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bf  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	2a c0       	rjmp	.+84     	; 0x78 <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e6       	ldi	r30, 0x6C	; 108
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 30       	cpi	r26, 0x0C	; 12
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ac e0       	ldi	r26, 0x0C	; 12
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 39       	cpi	r26, 0x91	; 145
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	7f c0       	rjmp	.+254    	; 0x168 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:

#include "SPI/SPI.h"

int main(void)
{
    spi_slave_init();
  6c:	43 d0       	rcall	.+134    	; 0xf4 <spi_slave_init>
	sei();
  6e:	78 94       	sei
	
	spi_puts("WORLD HELLO");
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	91 e0       	ldi	r25, 0x01	; 1
  74:	6b d0       	rcall	.+214    	; 0x14c <spi_puts>
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0xa>

00000078 <__vector_17>:

	/* get data from receive buffer */
	data = SPI_RxBuf[tmptail];

	return data;
}
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	2f 93       	push	r18
  84:	3f 93       	push	r19
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
  8e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <SPI_RxHead>
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	8f 73       	andi	r24, 0x3F	; 63
  98:	99 27       	eor	r25, r25
  9a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <SPI_RxTail>
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	82 17       	cp	r24, r18
  a2:	93 07       	cpc	r25, r19
  a4:	39 f0       	breq	.+14     	; 0xb4 <__vector_17+0x3c>
  a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <SPI_RxHead>
  aa:	2e b5       	in	r18, 0x2e	; 46
  ac:	fc 01       	movw	r30, r24
  ae:	ef 5e       	subi	r30, 0xEF	; 239
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	20 83       	st	Z, r18
  b4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <SPI_TxHead>
  b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SPI_TxTail>
  bc:	98 17       	cp	r25, r24
  be:	71 f0       	breq	.+28     	; 0xdc <__vector_17+0x64>
  c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SPI_TxTail>
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	8f 73       	andi	r24, 0x3F	; 63
  ca:	99 27       	eor	r25, r25
  cc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SPI_TxTail>
  d0:	fc 01       	movw	r30, r24
  d2:	ef 5a       	subi	r30, 0xAF	; 175
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	80 81       	ld	r24, Z
  d8:	8e bd       	out	0x2e, r24	; 46
  da:	01 c0       	rjmp	.+2      	; 0xde <__vector_17+0x66>
  dc:	1e bc       	out	0x2e, r1	; 46
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <spi_slave_init>:
  f4:	24 9a       	sbi	0x04, 4	; 4
  f6:	80 ec       	ldi	r24, 0xC0	; 192
  f8:	8c bd       	out	0x2c, r24	; 44
  fa:	8d b5       	in	r24, 0x2d	; 45
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	1e bc       	out	0x2e, r1	; 46
 100:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 104:	08 95       	ret

00000106 <spi_putc>:
**************************************************************************/
void spi_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (SPI_TxHead + 1) & SPI_TX_BUFFER_MASK;
 106:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <SPI_TxHead>
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
 110:	2f 73       	andi	r18, 0x3F	; 63
 112:	33 27       	eor	r19, r19
	
	#if defined (SPI_SLAVE_ENABLED)
	// If no char in SPDR -> fill directly
	if (SPI_TxHead == SPI_TxTail && SPI_SPDR==SPI_SPDR_EMPTY){
 114:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <SPI_TxHead>
 118:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <SPI_TxTail>
 11c:	49 13       	cpse	r20, r25
 11e:	09 c0       	rjmp	.+18     	; 0x132 <spi_putc+0x2c>
 120:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 124:	91 11       	cpse	r25, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <spi_putc+0x2c>
		SPDR = data;
 128:	8e bd       	out	0x2e, r24	; 46
		SPI_SPDR = SPI_SPDR_FULL;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 130:	08 95       	ret
	}
	else if (tmphead != SPI_TxTail){
 132:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <SPI_TxTail>
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	24 17       	cp	r18, r20
 13a:	35 07       	cpc	r19, r21
 13c:	31 f0       	breq	.+12     	; 0x14a <spi_putc+0x44>
		SPI_TxBuf[tmphead] = data;
 13e:	f9 01       	movw	r30, r18
 140:	ef 5a       	subi	r30, 0xAF	; 175
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	80 83       	st	Z, r24
		SPI_TxHead = tmphead;
 146:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <SPI_TxHead>
 14a:	08 95       	ret

0000014c <spi_puts>:
Purpose:  transmit string to SPI
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void spi_puts(const char *s )
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
	while (*s) {
 152:	88 81       	ld	r24, Y
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <spi_puts+0x16>
 158:	21 96       	adiw	r28, 0x01	; 1
		spi_putc(*s++);
 15a:	d5 df       	rcall	.-86     	; 0x106 <spi_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void spi_puts(const char *s )
{
	while (*s) {
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fc cf       	rjmp	.-8      	; 0x15a <spi_puts+0xe>
		spi_putc(*s++);
	}

}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
