
SPI-example-Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c11  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b4  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000558  00000000  00000000  00001905  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d3  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	57 c0       	rjmp	.+174    	; 0xfc <__vector_19>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 38       	cpi	r26, 0x86	; 134
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	19 d0       	rcall	.+50     	; 0xdc <main>
  aa:	8a c0       	rjmp	.+276    	; 0x1c0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <readSPI>:


uint8_t readSPI(uint8_t addr) {
	
	// Send the register address
	PORTB&= ~(1<<CS_CAM_1);
  ae:	2a 98       	cbi	0x05, 2	; 5
	SPDR = addr;
  b0:	8e bd       	out	0x2e, r24	; 46

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <readSPI+0x4>

	// Receive the value from the ArduCAM
	SPDR = 0x00; //Command
  b8:	1e bc       	out	0x2e, r1	; 46

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <readSPI+0xc>
	uint8_t data = SPDR;
  c0:	8e b5       	in	r24, 0x2e	; 46

	PORTB|= (1<<CS_CAM_1);
  c2:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
  c4:	08 95       	ret

000000c6 <writeSPI>:

void writeSPI(uint8_t addr, uint8_t data) {
	
	PORTB&= ~(1<<CS_CAM_1);
  c6:	2a 98       	cbi	0x05, 2	; 5
	SPDR = addr;
  c8:	8e bd       	out	0x2e, r24	; 46

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
  ca:	0d b4       	in	r0, 0x2d	; 45
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <writeSPI+0x4>

	SPDR = data;
  d0:	6e bd       	out	0x2e, r22	; 46

	//Wait until transmission complete
	while(!(SPSR & (1<<SPIF) ));
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <writeSPI+0xc>

	PORTB|= (1<<CS_CAM_1);
  d8:	2a 9a       	sbi	0x05, 2	; 5
  da:	08 95       	ret

000000dc <main>:
	
}

int main(void)
{
	DDRD |= (1 << PD0);
  dc:	50 9a       	sbi	0x0a, 0	; 10
	
	PORTD &= ~(1 << PD0);
  de:	58 98       	cbi	0x0b, 0	; 11
	
    spi_master_init(0,SPI_CLOCK_DIV2);
  e0:	64 e0       	ldi	r22, 0x04	; 4
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	5b d0       	rcall	.+182    	; 0x19c <spi_master_init>
	// Load data into the buffer
	
	writeSPI(0x80, 0x97);
  e6:	67 e9       	ldi	r22, 0x97	; 151
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	ed df       	rcall	.-38     	; 0xc6 <writeSPI>
	
	
	uint8_t data = readSPI(0x00);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	df df       	rcall	.-66     	; 0xae <readSPI>
  f0:	87 39       	cpi	r24, 0x97	; 151
	
	if (data==0x97) {
  f2:	09 f4       	brne	.+2      	; 0xf6 <main+0x1a>
  f4:	58 9a       	sbi	0x0b, 0	; 11
		PORTD|= (1 << PD0);
  f6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <__vector_19>:
  fc:	1f 92       	push	r1
ISR(SPI_STC_vect)
/*************************************************************************
Function: SPI interrupt
Purpose:  called when the SS pin has been put low
**************************************************************************/
{
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	0b b6       	in	r0, 0x3b	; 59
 108:	0f 92       	push	r0
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	/* SPI MASTER */
#if defined (SPI_MASTER_ENABLED)
	
	//RECEIVE
	// calculate buffer index 
	tmphead = ( SPI_RxHead + 1) & SPI_RX_BUFFER_MASK;
 116:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SPI_RxHead>
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	8f 73       	andi	r24, 0x3F	; 63
 120:	99 27       	eor	r25, r25
	if ( tmphead == SPI_RxTail ) {
 122:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <SPI_RxTail>
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	39 f0       	breq	.+14     	; 0x13c <__vector_19+0x40>
		// error: receive buffer overflow
				
		} else {
		// store new index
		SPI_RxHead = tmphead;
 12e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <SPI_RxHead>
		// store received data in buffer
		SPI_RxBuf[tmphead] = SPDR;
 132:	2e b5       	in	r18, 0x2e	; 46
 134:	fc 01       	movw	r30, r24
 136:	ea 5f       	subi	r30, 0xFA	; 250
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	20 83       	st	Z, r18
	}

	// SEND
	if ( SPI_TxHead != SPI_TxTail) {
 13c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SPI_TxHead>
 140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPI_TxTail>
 144:	98 17       	cp	r25, r24
 146:	71 f0       	breq	.+28     	; 0x164 <__vector_19+0x68>
		// calculate and store new buffer index 
		tmptail = (SPI_TxTail + 1) & SPI_TX_BUFFER_MASK;
 148:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SPI_TxTail>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	8f 73       	andi	r24, 0x3F	; 63
 152:	99 27       	eor	r25, r25
		SPI_TxTail = tmptail;
 154:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPI_TxTail>
		// get one byte from buffer and write it to UART
		SPDR = SPI_TxBuf[tmptail];  // start transmission 
 158:	fc 01       	movw	r30, r24
 15a:	ea 5b       	subi	r30, 0xBA	; 186
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 81       	ld	r24, Z
 160:	8e bd       	out	0x2e, r24	; 46
 162:	0f c0       	rjmp	.+30     	; 0x182 <__vector_19+0x86>
		} 
	else if(SPI_bytesRequest>0){
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 168:	88 23       	and	r24, r24
 16a:	39 f0       	breq	.+14     	; 0x17a <__vector_19+0x7e>
		SPI_bytesRequest--;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	81 50       	subi	r24, 0x01	; 1
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		SPDR = 0x00;
 176:	1e bc       	out	0x2e, r1	; 46
 178:	04 c0       	rjmp	.+8      	; 0x182 <__vector_19+0x86>
	}
	else {
		// tx buffer empty, STOP the transmission
		SPI_PORT|= (1<<SPI_PIN_SS);
 17a:	2c 9a       	sbi	0x05, 4	; 5
		SPI_CTS = SPI_INACTIVE;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <SPI_CTS>
		SPDR=0x00;
	}
	
#endif

}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0b be       	out	0x3b, r0	; 59
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <spi_master_init>:
Returns:  none
**************************************************************************/
void spi_master_init(uint8_t mode, uint8_t clock){
	
	// Pin Configuration
	SPI_DDR |= (1<<SPI_PIN_SS);
 19c:	24 9a       	sbi	0x04, 4	; 4
	SPI_PORT|= (1<<SPI_PIN_SS);
 19e:	2c 9a       	sbi	0x05, 4	; 5
	//set PB2 to output and set it high
	SPI_DDR |= (1<<CS_CAM_1);
 1a0:	22 9a       	sbi	0x04, 2	; 4
	SPI_PORT|= (1<<CS_CAM_1);
 1a2:	2a 9a       	sbi	0x05, 2	; 5
	
	SPI_CTS	 = SPI_INACTIVE; 
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <SPI_CTS>
	// Set MOSI and SCK output, all others input
	SPI_DDR |= (1<<SPI_PIN_MOSI)|(1<<SPI_PIN_SCK);
 1aa:	94 b1       	in	r25, 0x04	; 4
 1ac:	90 6a       	ori	r25, 0xA0	; 160
 1ae:	94 b9       	out	0x04, r25	; 4
	// Enable SPI, Master, set clock rate
	SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(mode<<CPHA)|(clock<<SPR0);
 1b0:	24 e0       	ldi	r18, 0x04	; 4
 1b2:	82 9f       	mul	r24, r18
 1b4:	c0 01       	movw	r24, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	60 6d       	ori	r22, 0xD0	; 208
 1ba:	86 2b       	or	r24, r22
 1bc:	8c bd       	out	0x2c, r24	; 44
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
